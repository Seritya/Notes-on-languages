Started Unix 2018/01/04
================================
Sources: Coursera.org/learn/unix/
================================

To clear the stuff that's written there (also called "prompts" written in the "shell" ;) ), you just type "clear" and hit enter.

Summary
    
    You can scroll through your command history with the Up and Down arrow keys.
    The root directory (/) contains all of the folders and files on your computer.
    Your home directory (~) is the directory where your terminal always starts.
    
    Basics
    ======
    echo      echo prints text to your terminal. --> echo Hello World
    clear     clear will clean up your terminal.
    cd        Use the cd command to change your working directory.
    pwd       The pwd command will print the working directory.
    ls        The ls command will list files and folders in a directory. You can use * to list (e.g. *.jpg, *DSC* or 2017*)
    -i        makes everything non-case-sensitive
    alias     set shorter names for commands you use often. Can be written down in ~/.bash_profile (must be run before valid)
    
    Create, change or show folders and files
    ==========================
    mkdir     Use mkdir to create new directories.
    touch     The touch command creates empty files.
    >         You can use > to redirect the output of a command into a file.
    >>        will append command output to the end of a file.
    ATTENTION: if you use > on a pre-existing file, it will simply delete 
              everything already written and replace it with the new stuff.
    cat       Print a text file to the command line using cat.
    wc        Inspect properties of a text file with wc. The wc command displays
              the number of lines in a file followed by the number of words and 
              then the number of characters.
    head      Peak at the beginning of a text file with head. head -n 4 will show the first 4.
    tail      Peak at the beginning of a text file with tail. tail -n 4 will show the last 4.
    less      Scroll through a large text file with less. Use / to search for entries and 
              "n"/Shift+n to jump to the next/last result. Type q to get back to the prompt.
              Use b to go to the next page.
    nano      nano is simple text editor. Directions how to use it are shown when opened.

    Move, Copy, Remove
    ==================
    mv        can be used for moving or renaming files or folders. Move like that: mv [filename] [name of folder].
              if [name of folder] doesn't exist, the file will be renamed and then have the name of the folder. 
              This only works within folders. If you want to move a file to a folder that is up one, the shortcut is .. 
              --> mv test.txt ../ OR try the absolute path: mv test.txt ~/FolderName/SubFolder/  
              For example, you have Home/Documents/text.txt and you are standing on Documents (it's your working directory)
              So you do: mv text.txt ../ will move the file to the home folder.
    mv x*     move all things that start with x (e.g. mv 2017-* 2017/ --> moves all photos from 2017 in the folder 2017)
    cp        can copy files or folders.
    rm        You should try to avoid using rm which permanently removes files or folders.

    Self Help
    =========
    man       Shows the documentation of every command. For example: man ls
              Use / to search for entries and "n"/Shift+n to jump to the next/last result. Type q to get back to the prompt.
    apropos   If you can’t think of the name of a command use apropos to search for a word associated with that command.
              type apropos [search term e.g. "editor"] into the command line which will print a list of results
             
    Search for stuff
    ================
    grep      search for stuff (for example in text files: grep "[what you search]" test.txt) 
              you can type multiple file names here to search more than one
    egrep     same but with more abilities
    find      find can be used to search for the names of files in a directory.
    -name     add after "find" to search for a file name (find . -name "states.txt")
    histroy   shows all commands used. They are saved here: ~/.bash_history (searchable with egrep)
    
  
    Metacharacters
    ==============
    *         represents 0 to n characters      a*e --> age, ate, ape, apetite, anemone...
    .         represents any character          a.e --> age, ate, ape...
    +         is a quantifier which represents one or more occurrences of the preceeding expression. 
              For example the regular expression “s+as” means: one or more “s” followed by “as”.        
    ?	      Zero or One of Previous
    ^         represents the start of a line (^M will show stuff starting with M)
    $         represents the end of line. ($n will show stuff ending with n)
    |         "or" e.g. egrep "North|South|West" states.txt --> North Carolina, South Dakota, West Virginia

    {}        to specify an exact number of occurrences of an expression. "s{2}" = exactly two “s”, s{2,3}=two or three
              {6}	  Exactly 6 of Previous
              {4, 6}  Between 4 and 6 or Previous
              {4, }	  More than 4 of Previous
    "( )"     capturing group. combined with {} --> (iss){2} will show Mississippi
              "(i.{2}){3}" do strange searches ^^ means: three occurrences of an “i” followed by two of any character. Aha ^^
              
    \w        The \w metacharacter corresponds to all “word” characters
    \d        The \d metacharacter corresponds to all “number” characters
    \s        The \s metacharacter corresponds to all “space” characters
    \W        Brings everything containing non-word characters (even if it also contains word characters)
    \D        Brings everything containing non-number characters (even if it also contains number characters)
    \S        Brings everything containing non-space characters (even if it also contains space characters)
    \n        Newline
    
    \*        use "\" to tell Unix that you are actually searching for */+/. etc. as they are also metacharacters
    
    [ ]       Create specific character sets using square brackets ([ ]) including the characters we wish to match
    [^ ]      create a regular expression for the compliment of a set by including a caret (^) in the beginning of a set
    [a-d]     includes a,b,c,d. Two ranges: [e-qE-Q]
    
    Flags
    =====
    Do different things in different comands. Use "man" for help (see "Self Help" above)
    -l        "line" with wc (shows number of lines/entries), "list" with cd
    -v        Invert-match egrep -v "\w" will show you everything except what you're searching for
    -i        non-case-sensitive
    -n        displays the line number the occurence is on in the file
    -i        makes everything non-case-sensitive
    -o        with egrep: shows not the whole entry with the matching letter but only the letter (Alabama --> a)
    -name     add after "find" to search for a file name (find . -name "states.txt")
        
    
    cool stuff
    ==========
    cal/ncal  shows a calendar (two different formats)
    calendar  shows quite random entries for the next days ^^
    
    Make
    ====
    With make you create a file that contains information about relationships between files and programs
    it allows to automatically rebuild files that depend on other files
    makefiles are text files that contain a list of rules.
    1) create makefile: nano makefile
    2) entry in the makefile: [target]: [dependencies...]    e.g.   draft_journal_entry.txt: toc.txt
                                [commands...]                           touch draft_journal_entry.txt
                              ^ Tab here is important!  
                              --> "make [target]" will execute rule  --> "make draft_journal_entry.txt" will create said file
    3) rule will be executed only if dependencies or related files have changed
    4) create a readme.txt and update the number of entries found in a different file (here toc.txt):
            readme.txt: toc.txt
                echo "This journal contains the following number of entries:" > readme.txt   |creates file and first line
                wc -l toc.txt | egrep -o "[0-9]+" >> readme.txt                              |adds lines in toc.txt
                    ^only number       ^omitts file name
                    of occurences
    5) to run all commands under make, add first line to makefile: all: NameOfAll.txt NameOfOther.txt
    6) to delete created files add rule: clean:
                                            rm filename.txt
                                            rm filename.txt
             
